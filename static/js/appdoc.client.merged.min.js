"use strict";function _conds(){return setTimeout(PR.prettyPrint),React.createElement($FMD,null,React.createElement(Typography,{variant:"h1"},"Modo de uso"),React.createElement("p",null,"Fluid CSS ofrece un conjunto de funciones que permiten aplicar estilos condicionales en función de las dimensiones de la ventana. Estas funciones son ",React.createElement("code",null,"btwX"),", ",React.createElement("code",null,"btwY"),", ",React.createElement("code",null,"ltX"),","," ",React.createElement("code",null,"gtX"),", y ",React.createElement("code",null,"lerp"),", cada una diseñada para facilitar la adaptación de estilos en diferentes contextos de visualización."),sep,React.createElement(Reglas_lt,null),sep,React.createElement(MayorQue,null),sep,React.createElement(Entre,null),sep,React.createElement(Lerps,null),sep,React.createElement(EntreY,null),sep,React.createElement(Caracteristicas,null),sep,React.createElement(Ejemplos,null))}function Reglas_lt(){return React.createElement($index,{label:"ltX y ltY"},React.createElement(Typography,{variant:"h4"},"ltX y ltY | (<=)"),React.createElement($CardF,null,"Esta condición se aplica cuando el ancho de la pantalla es menor o igual que el valor especificado, permitiendo definir estilos específicos para pantallas pequeñas.",React.createElement($CardDef,{title:"Menor o igual que en X o Y",elevation:0},React.createElement("div",null,"La regla ",React.createElement("code",null,"ltX")," establece un punto de ajuste en el ancho de la pantalla donde se aplican estilos específicos. Esto permite una personalización precisa y un diseño responsivo en dispositivos con pantallas más pequeñas."),React.createElement("br",null),React.createElement(Typography,{variant:"h5"},"Ejemplo de uso"),React.createElement($PR,{lang:"javascript"},"fluidCSS().ltX(900, { backgroundColor: ['red', 'blue'] }).end();"))))}function MayorQue(){return React.createElement($index,{label:"Mayor que (>)"},React.createElement(Typography,{variant:"h4"},"Mayor que (>)"),React.createElement($CardF,null,"Esta condición se aplica cuando el ancho de la pantalla es mayor que el valor especificado, ideal para pantallas grandes.",React.createElement($CardDef,{title:"Mayor que en X",elevation:0},React.createElement("div",null,"La regla ",React.createElement("code",null,"gtX")," permite aplicar estilos específicos cuando el ancho de la pantalla supera un valor límite (X). Esto optimiza la experiencia del usuario en dispositivos de escritorio."),React.createElement("br",null),React.createElement(Typography,{variant:"h5"},"Ejemplo de uso"),React.createElement($PR,{lang:"javascript"},"fluidCSS().gtX(1200, { fontSize: ['18px', '14px'] }).end();"))))}function Entre(){return React.createElement($index,{label:"Entre"},React.createElement(Typography,{variant:"h4"},"Entre"),React.createElement($CardF,null,"Esta condición permite aplicar estilos cuando el ancho de la pantalla está dentro de un rango específico.",React.createElement($CardDef,{title:"Entre X e Y",elevation:0},React.createElement("div",null,"La regla ",React.createElement("code",null,"btwX")," permite definir estilos que se aplican cuando el ancho de la pantalla está entre dos valores. Esto es útil para crear diseños responsivos que se adaptan a diferentes tamaños de pantalla."),React.createElement("br",null),React.createElement(Typography,{variant:"h5"},"Ejemplo de uso"),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwX([600, 900], { backgroundColor: ['green', 'yellow'] }).end();"))))}function Lerps(){return React.createElement($index,{label:"lerpX y lerpY"},React.createElement(Typography,{variant:"h4"},"lerpX y lerpY"),React.createElement($CardF,null,"Esta función permite aplicar estilos de manera gradual en función de la posición del cursor en la pantalla.",React.createElement($CardDef,{title:"lerpX y lerpY",elevation:0},React.createElement("div",null,"Las reglas ",React.createElement("code",null,"lerpX")," y ",React.createElement("code",null,"lerpY")," permiten definir estilos que se aplican de manera gradual en función de la posición del cursor en la pantalla. Esto es útil para crear efectos de transición suaves y personalizados."),React.createElement("br",null),React.createElement(Typography,{variant:"h5"},"Ejemplos de uso"),React.createElement($PR,{lang:"javascript"},["fluidCSS().lerpX([400, 800], { opacity: [0, 1] }).end();","fluidCSS().lerpX(400, 800, { opacity: [0, 1] }).end();","fluidCSS().lerpY([400, 800], { opacity: [0, 1] }).end();","fluidCSS().lerpY(400, 800, { opacity: [0, 1] }).end();"]))))}function EntreY(){return React.createElement($index,{label:"Entre Y"},React.createElement(Typography,{variant:"h4"},"Entre Y"),React.createElement($CardF,null,"Esta condición permite aplicar estilos cuando la altura de la pantalla está dentro de un rango específico.",React.createElement($CardDef,{title:"Entre Y1 e Y2",elevation:0},React.createElement("div",null,"La regla ",React.createElement("code",null,"btwY")," permite definir estilos que se aplican cuando la altura de la pantalla está entre dos valores. Esto es útil para crear diseños responsivos que se adaptan a diferentes tamaños de pantalla."),React.createElement("br",null),React.createElement(Typography,{variant:"h5"},"Ejemplo de uso"),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwY([600, 900], { backgroundColor: ['green', 'yellow'] }).end();"))))}function Caracteristicas(){return React.createElement($index,{label:"Características"},React.createElement(Typography,{variant:"h4"},"Características de las funciones"),React.createElement($CardF,null,"A continuación, se presentan las características de cada una de las funciones:",React.createElement("ul",null,React.createElement("li",null,React.createElement("code",null,"btwX"),": permite definir estilos que se aplican cuando el ancho de la pantalla está entre dos valores."),React.createElement("li",null,React.createElement("code",null,"btwY"),": permite definir estilos que se aplican cuando la altura de la pantalla está entre dos valores."),React.createElement("li",null,React.createElement("code",null,"ltX"),": establece un punto de ajuste en el ancho de la pantalla donde se aplican estilos específicos."),React.createElement("li",null,React.createElement("code",null,"gtX"),": permite aplicar estilos específicos cuando el ancho de la pantalla supera un valor límite (X)."),React.createElement("li",null,React.createElement("code",null,"lerp"),": permite definir estilos que se aplican de manera gradual en función de la posición del cursor en la pantalla.")),React.createElement(Typography,{variant:"h5"},"Uso de las funciones"),React.createElement("p",null,"Las funciones ",React.createElement("code",null,"btwX"),", ",React.createElement("code",null,"btwY"),", ",React.createElement("code",null,"ltX"),","," ",React.createElement("code",null,"gtX")," y ",React.createElement("code",null,"lerp")," se pueden utilizar de manera combinada para crear diseños responsivos y personalizados."),React.createElement("p",null,"Por ejemplo, se puede utilizar ",React.createElement("code",null,"btwX")," para definir estilos para pantallas pequeñas y ",React.createElement("code",null,"gtX")," para definir estilos para pantallas grandes."),React.createElement("p",null,"Además, se puede utilizar ",React.createElement("code",null,"lerp")," para crear efectos de transición suaves y personalizados."),React.createElement("p",null,"Las funciones también se pueden utilizar para crear diseños responsivos que se adaptan a diferentes tamaños de pantalla y dispositivos."),React.createElement("p",null,"Por ejemplo, se puede utilizar ",React.createElement("code",null,"btwY")," para definir estilos para pantallas con una altura específica y ",React.createElement("code",null,"ltX")," para definir estilos para pantallas con un ancho específico."),React.createElement("p",null,"Las funciones también se pueden utilizar para crear efectos de transición suaves y personalizados en función de la posición del cursor en la pantalla."),React.createElement("p",null,"Por ejemplo, se puede utilizar ",React.createElement("code",null,"lerp")," para crear un efecto de transición suave entre dos estilos diferentes en función de la posición del cursor en la pantalla."),React.createElement("p",null,"En resumen, las funciones ",React.createElement("code",null,"btwX"),", ",React.createElement("code",null,"btwY"),","," ",React.createElement("code",null,"ltX"),", ",React.createElement("code",null,"gtX")," y ",React.createElement("code",null,"lerp")," ofrecen una gran flexibilidad y personalización para crear diseños responsivos y atractivos.")))}function Ejemplos(){return React.createElement($index,{label:"Ejemplos"},React.createElement(Typography,{variant:"h4"},"Ejemplos de uso de Fluid CSS"),React.createElement($CardF,null,React.createElement("p",null,"Define estilos que cambian según la altura de la ventana."),React.createElement(Typography,{variant:"h5"},"Uso de la función btwY:"),React.createElement("p",null,"Este ejemplo aplica estilos que cambian según la altura de la ventana."),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwY([400, 800], { height: ['100vh', '50vh'] }).end();"),React.createElement("p",null,"Esto aplica un estilo de altura que cambia entre 100vh y 50vh al estar entre 400px y 800px de altura de ventana."),React.createElement(Typography,{variant:"h5"},"Uso de la función btwX:"),React.createElement("p",null,"Este ejemplo aplica estilos que cambian según el ancho de la ventana."),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwX([400, 800], { height: ['100vw', '50vw'] }).end();"),React.createElement("p",null,"Esto aplica un estilo de altura que cambia entre 100vw y 50vw al estar entre 400px y 800px de ancho de ventana."),React.createElement(Typography,{variant:"h5"},"Uso de la función btwY con argumentos separados:"),React.createElement("p",null,"Este ejemplo es equivalente al anterior pero usando argumentos separados."),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwY(400, 800, { height: ['100vh', '50vh'] }).end();"),React.createElement("p",null,"Esto aplica un estilo de altura que cambia entre 100vh y 50vh al estar entre 400px y 800px de altura de ventana."),React.createElement(Typography,{variant:"h5"},"Uso de la función btwY dentro del rango:"),React.createElement("p",null,"Esto aplica un estilo de altura de 100vh únicamente dentro del rango especificado."),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwY(400, 800, { height: '100vh' }).end();"),React.createElement("p",null,"Esto aplica un estilo de altura de 100vh únicamente dentro del rango especificado."),React.createElement(Typography,{variant:"h5"},"Uso de la función btwY fuera del rango:"),React.createElement("p",null,"Esto aplica un estilo de altura de 100vh únicamente fuera del rango especificado."),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwY(400, 800, { height: [null,'100vh'] }).end();"),React.createElement("p",null,"Esto aplica un estilo de altura de 100vh únicamente fuera del rango especificado."),React.createElement(Typography,{variant:"h5"},"Uso de la función btwY con estilos por fuera y dentro:"),React.createElement("p",null,"Esto aplica un estilo de altura que cambia entre 100vh y 50vh al estar entre 400px y 800px de altura de ventana."),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwY(400, 800, { height: ['100vh', '50vh'] }).end();"),React.createElement("p",null,"Esto aplica un estilo de altura que cambia entre 100vh y 50vh al estar entre 400px y 800px de altura de ventana."),React.createElement(Typography,{variant:"h5"},"Uso de la función btwY con múltiples estilos:"),React.createElement("p",null,"Esto aplica un estilo de altura que cambia entre 40vh, 50vh y 100vh al estar entre 400px y 800px de altura de ventana."),React.createElement($PR,{lang:"javascript"},"fluidCSS().btwY(400, 800, { height: ['40vh', '50vh', '100vh'] }).end();"),React.createElement("p",null,"Esto aplica un estilo de altura que cambia entre 40vh, 50vh y 100vh al estar entre 400px y 800px de altura de ventana."),React.createElement(Typography,{variant:"h5"},"Uso de la función lerpX:"),React.createElement("p",null,"Esto aplica un estilo de ancho que cambia linealmente entre 200px y 800px al estar entre 390px y 1200px de ancho de ventana."),React.createElement($PR,{lang:"javascript"},"fluidCSS().lerpX([390, 1200], { width: [200, 800] }).end();"),React.createElement("p",null,"Esto aplica un estilo de ancho que cambia linealmente entre 200px y 800px al estar entre 390px y 1200px de ancho de ventana.")))}function initApp(){Object.assign(config_template,{banner:{left:{label:"Documentación",logo:"static/img/icon.svg"},right:{social:{github:{label:"Jeff-Aporta",url:"https://github.com/Jeff-Aporta"},youtube:{label:"YouTube",url:"https://www.youtube.com/@JeffAporta"},whatsapp:{label:"WhatsApp",url:"https://wa.link/1tmqmt"},telegram:{label:"Telegram",url:"https://t.me/jeffAporta"}}}},mapSite:[{lbl:" "},{component:function(){return React.createElement(_masEnMiPortafolio,null)}},{lbl:" - "},{lbl:"Empecemos"},{lbl:"Introducción",id:"intro",content:function(){return React.createElement(_intro,null)},i:"fa-regular fa-file-lines"},{lbl:" "},{lbl:"Uso"},{lbl:"Condiciones",id:"conds",content:function(){return React.createElement(_conds,null)},i:"fa-solid fa-person-chalkboard"},{lbl:"Interpolación líneal",id:"lerp",content:function(){return React.createElement(_lerp,null)},i:"fa-solid fa-arrows-left-right"},{lbl:"  "}],repo:{name:"Fluid CSS",url:"https://github.com/Jeff-Aporta/fluid-css"}}),ReactDOM.render(React.createElement(App,null),document.getElementById("root")),changeContent({id:get_id_param()})}var sep=React.createElement(_,null,React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null));function _intro(){return React.createElement($FMD,null,React.createElement(_$Bienvenido,{name_app:"Fluid CSS",img_url:"static/img/app.svg"},"Fluid CSS es un sistema avanzado para el manejo y manipulación de estilos CSS dinámicos, basado en comandos personalizados.",React.createElement("p",null,"Diseñado para ajustar y personalizar estilos en función de condiciones específicas, Fluid CSS permite definir reglas CSS que responden a parámetros como el tamaño de la pantalla, utilizando comandos de estilo encapsulados.")),sep,React.createElement(_$Instalación,{url_cdn:"https://jeff-aporta.github.io/fluid-css/static/js/index.all.min.js",npm_pack:"fluid-css-lng"}),sep,React.createElement(_$testing,{src_params_iife:{url:"https://jeff-aporta.github.io/fluid-css/static/js/index.all.min.js",name:"fluidCSS",comment:"Debería mostrar la función: ƒ I(e){if(!e)return new ..."},src_params_nodemodule:{name:"fluidCSS",nodepack:"fluid-css-lng",comment:"// Debería mostrar la función: ƒ fluidCSS(props) { ..."}}),sep,React.createElement(e,null));function e(){return React.createElement($index,{label:"Características Técnicas"},React.createElement(Card,{className:"pad-10px"},React.createElement(Typography,{variant:"h5"},"Funciones Principales:"),sep,React.createElement($CardDef,{title:"Interpolación Lineal",elevation:0},"Fluid CSS utiliza la función ",React.createElement("code",null,"lerp")," para realizar interpolaciones suaves entre valores de estilo. Esto permite que los elementos de la interfaz se ajusten dinámicamente según el tamaño de la ventana, proporcionando una experiencia visual fluida."),React.createElement($CardDef,{title:"Condiciones Dinámicas",elevation:0},React.createElement("div",null,"Con las funciones ",React.createElement("code",null,"btwX"),", ",React.createElement("code",null,"btwY"),","," ",React.createElement("code",null,"ltX"),", y ",React.createElement("code",null,"gtX"),", Fluid CSS permite definir estilos que responden a condiciones específicas basadas en el tamaño de la ventana. Esto incluye aplicar estilos cuando el ancho o la altura está dentro de un rango específico o por encima/debajo de ciertos límites."),React.createElement("p",null,"Estas condiciones permiten una personalización precisa de la interfaz, optimizando la adaptación a diferentes dispositivos y resoluciones.")),React.createElement($CardDef,{title:"Fácil Integración",elevation:0},"Fluid CSS es compatible con cualquier proyecto web y se integra fácilmente utilizando npm. Su diseño modular permite que funcione tanto en el lado del cliente como en el servidor, facilitando su implementación en diversos entornos de desarrollo.",React.createElement("p",null,"La biblioteca está diseñada para ser intuitiva, permitiendo a los desarrolladores aplicar estilos dinámicos sin complicaciones adicionales."))),React.createElement($$h,null),React.createElement(Card,{className:"pad-20px",elevation:6},React.createElement("strong",null,"Fluid CSS es ideal para proyectos que requieren una adaptación elegante y responsiva a diferentes dispositivos y resoluciones.")))}}function _lerp(){return setTimeout(PR.prettyPrint),React.createElement($FMD,null,React.createElement($h1,null,"Interpolación líneal"),"Las reglas LERP (Linear Interpolation) en Fluid CSS permiten crear transiciones suaves entre diferentes valores de propiedades CSS en función del tamaño de la pantalla. Utilizando interpolación lineal, estas reglas definen cómo deben cambiar las propiedades a medida que el ancho de la ventana se expande o se contrae dentro de un rango específico, proporcionando una transición fluida y precisa.",sep,React.createElement(a,null),sep,React.createElement(e,null),sep,React.createElement(n,null),sep,React.createElement(r,null),sep,React.createElement(l,null),sep,React.createElement(t,null),sep,React.createElement($index,{label:"A nivel de CSS"},React.createElement($h3,null,"Funcionamiento a nivel de CSS"),React.createElement($$h,null),React.createElement($CardF,null,"Las reglas lerp funcionan a nivel de CSS, es decir, JavaScript, aunque interpreta las reglas, no tiene que realizar cálculos más allá de la interpretación de las mismas.",React.createElement("p",null,"Existen ecuaciones sobre las que se basa la interpolación lineal. La ecuación es la siguiente:"),React.createElement($code,{style:{color:"khaki"},elevation:0},"v_lerp = (vf - vi) * t + vi"),"A continuación, se muestra una guía de cómo se realiza la interpolación lineal en CSS.",React.createElement($PR,{lang:"css",elevation:0},loadStringsSync("static/jsx/frags/lerp-css.txt")),"Debido a cómo se aprovecha CSS para realizar la interpolación lineal, la regla lerp solo se puede aplicar a propiedades de medidas en px y no se puede aplicar a propiedades como color, background, opacity, etc.")));function e(){return React.createElement($index,{label:"Tipos de proyección"},React.createElement($h3,null,"Tipos de proyección"),React.createElement($$h,null),React.createElement($CardF,null,"En las reglas LERP, los corchetes `[ ]` y los paréntesis `( )` tienen significados específicos que permiten controlar cómo se comportan las interpolaciones a lo largo del rango de anchos de pantalla definido.",React.createElement($CardDef,{title:"Proyección abierta ( )",elevation:0},"Indica que la interpolación continuará siendo lineal más allá de los límites del rango de anchos de pantalla."),React.createElement($CardDef,{title:"Proyección cerrada [ ]",elevation:0},"Indica que la interpolación conservará el valor del extremo más cercano al rango de anchos de pantalla."),React.createElement($CardDef,{title:"Proyección mixta ( ] o [ )",elevation:0},"Indica que la interpolación conservará el valor del extremo más cercano al rango de anchos de pantalla.")))}function a(){return React.createElement($index,{label:"Sintaxis"},React.createElement($h3,null,"Sintaxis"),React.createElement(Card,{className:"pad-10px"},React.createElement("p",null,"La estructura básica de una regla ",React.createElement("b",null,"LERP")," es la siguiente:"),React.createElement($code,{style:{color:"khaki"},elevation:0},["minWidth<-x->maxWidth?{","   attr-kebab-case: (valueInitialpx, valueFinalpx); ","}"].join("\n")),React.createElement("p",null,React.createElement("b",null,"Ejemplo.")),React.createElement($PR,{lang:"javascript",elevation:0},["fluidCSS({","   code: `","      600px<-x->1200px?{","         font-size: (16px, 24px);","     }","   `,","   clss: 'extra-classes'","});"].join("\n"))))}function t(){return React.createElement($index,{label:"Modo Cascada"},React.createElement($h3,null,"Modo Cascada"),React.createElement($$h,null),React.createElement($CardF,null,"En el contexto de fluidCSS, el método lerpX permite realizar interpolaciones lineales de manera fluida entre dos valores a lo largo de un rango específico. La sintaxis básica es la siguiente:",React.createElement($$h,null),React.createElement($PR,{lang:"javascript",style:{color:"khaki"},elevation:0},React.createElement("pre",null,React.createElement("code",null,["fluidCSS().lerpX([initLimit, finLimit],{","   attrCamelCase: [initValue, finValue] // Close projection","})","","fluidCSS().lerpX([initLimit, finLimit],{","   attrCamelCase: [flagInit, initValue, finValue] // Mix projection with only flag init","})","","fluidCSS().lerpX([initLimit, finLimit],{","   attrCamelCase: [flagInit, initValue, finValue, flagFinal] // Mix projection with flags","})","","fluidCSS().lerpX([initLimit, finLimit],{","   attrCamelCase: ['o', initValue, finValue, 'o'] // Open projection","})"].join("\n")))),React.createElement($$h,null),React.createElement($PR,{lang:"javascript",elevation:0},["fluidCSS().lerpX([600,1200],{","   margin: [20, 50] // Proyección cerrada por defecto","})"].join("\n")),React.createElement($$h,null),"Esta regla realiza una interpolación cerrada por defecto, es decir, si el ancho de la pantalla está fuera del rango definido (menor a 600px o mayor a 1200px), el valor de la propiedad margin se mantendrá constante en el extremo más cercano.",React.createElement("strong",null,'Bandera "e" (End) y "o" (Open)'),'Las banderas "e" (end) y "o" (open) permiten controlar cómo se comporta la interpolación en los extremos del rango:',React.createElement("p",null,'Proyección abierta ("o"): Para hacer que la interpolación continúe más allá de los límites del rango de anchos de pantalla, puedes usar las banderas "o" al inicio o al final del rango. Ejemplo de proyección abierta:'),React.createElement($PR,{lang:"javascript",elevation:0},["fluidCSS().lerpX([600,1200],{","   margin: ['o', 20, 50, 'o'] // Proyección abierta","})"].join("\n")),React.createElement($h,null),"En este caso, la interpolación continuará más allá de los 600px y 1200px, y los valores se calcularán de forma lineal fuera de este rango.",React.createElement("p",null,React.createElement("b",null,"La proyección mixta ( ]"),' se utiliza para tener una interpolación abierta al principio y cerrada al final. Aquí, puedes usar "o" al inicio y "e" al final, o solo "o" al principio: Ejemplo de proyección mixta ( ]:'),React.createElement($PR,{lang:"javascript",elevation:0},["fluidCSS().lerpX([600,1200],{","   margin: ['o', 20, 50] // Proyección mixta ( ]","   // Lo mismo que:","   margin: ['o', 20, 50, 'e'] // Proyección mixta ( ]","})"].join("\n")),React.createElement($$h,null),"En este caso, la interpolación será cerrada a la izquierda (por debajo de 600px) y abierta a la derecha (por encima de 1200px).",React.createElement("p",null,React.createElement("b",null,"Proyección mixta [ ):"),' La proyección mixta [ ) se utiliza cuando se quiere que la interpolación se comporte como cerrada en un extremo (izquierda) y abierta en el otro (derecha). Para lograr esto, usas la bandera "e" al inicio y "o" al final o solo una de ellas.'),React.createElement($PR,{lang:"javascript",elevation:0},["fluidCSS().lerpX([600,1200],{","   margin: ['e', 20, 50, 'o'] // Proyección mixta [ )","})"].join("\n")),React.createElement($$h,null),"Esto indica que la interpolación será abierta al inicio (antes de 600px) y cerrada al final (después de 1200px)."))}function l(){return React.createElement($index,{label:"Proyección mixta ( ] o [ )"},React.createElement($h3,null,"Proyección mixta ( ] o [ )"),React.createElement($$h,null),React.createElement($CardF,null,"Los corchetes `[ ]` y los paréntesis `( )` pueden generar una proyección mixta.",React.createElement("p",null,"Una proyección mixta significa que la interpolación se comportará de manera diferente en cada extremo, siendo uno de los lados abierto y el otro cerrado."),React.createElement("strong",null,"Sintáxis"),React.createElement($$h,null),React.createElement($code,{style:{color:"khaki"},elevation:0},["600px<-x->1200px?{","   margin: [20px, 50px);","}"].join("\n")),React.createElement($$h,null),React.createElement("center",null,React.createElement(a,null)),React.createElement($$h,null),"Significa que la interpolación se hará desde 600px con margen de 20px hasta 1200px con margen de 50px. La proyección mixta `[ )` implica que cuando el ancho de la pantalla sea menor a 600px, la interpolación se comportará como cerrada `(manteniendo el valor 20px)`, y cuando el ancho sea mayor a 1200px, la interpolación será abierta, superando la proyección del valor 50px.",React.createElement($$h,null),React.createElement($code,{style:{color:"khaki"},elevation:0},["600px<-x->1200px?{","   margin: (20px, 50px];","}"].join("\n")),React.createElement($$h,null),React.createElement("center",null,React.createElement(e,null)),React.createElement($$h,null),"En este caso, la interpolación se realiza desde 600px con margen de 20px hasta 1200px con margen de 50px. La proyección mixta `( ]` significa que cuando el ancho de la pantalla sea menor a 600px, la interpolación será abierta (continuará calculando los valores de manera lineal), y cuando el ancho sea mayor a 1200px, la interpolación se comportará como cerrada (manteniendo el valor 50px)."),React.createElement($$h,null),React.createElement($CardF,{elevation:6},"Este tipo de proyección es útil cuando se desea que los valores de las propiedades CSS no pasen de los límites establecidos, manteniendo un comportamiento controlado dentro del rango definido."));function e(){return React.createElement("svg",{height:"300",xmlns:"http://www.w3.org/2000/svg",className:fluidCSS().lerpX([320,500],{width:[220,350]}).end(),style:{backgroundColor:"white",filter:"invert(0.95)",borderRadius:"20px"}},React.createElement("g",{transform:"translate(40, 260)"},React.createElement("line",{x1:"-350",y1:"0",x2:"350",y2:"0",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"0",y1:"-300",x2:"0",y2:"300",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-300",x2:"20%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"70%",y1:"-300",x2:"70%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-20%",x2:"350",y2:"-20%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-70%",x2:"350",y2:"-70%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-20%",x2:"70%",y2:"-70%",stroke:"red",strokeWidth:"3"}),React.createElement("line",{x1:"70%",y1:"-70%",x2:"350",y2:"-70%",stroke:"magenta",strokeWidth:"3"}),React.createElement("line",{x1:"20%",y1:"-20%",x2:"-100%",y2:"100%",stroke:"magenta",strokeWidth:"3"}),React.createElement("text",{x:"20%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"600px"),React.createElement("text",{x:"70%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"1200px"),React.createElement("text",{x:"-20",y:"-20%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"20px"),React.createElement("text",{x:"-20",y:"-70%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"50px")))}function a(){return React.createElement("svg",{height:"300",xmlns:"http://www.w3.org/2000/svg",className:fluidCSS().lerpX([320,500],{width:[220,350]}).end(),style:{backgroundColor:"white",filter:"invert(0.95)",borderRadius:"20px"}},React.createElement("g",{transform:"translate(40, 260)"},React.createElement("line",{x1:"-350",y1:"0",x2:"350",y2:"0",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"0",y1:"-300",x2:"0",y2:"300",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-300",x2:"20%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"70%",y1:"-300",x2:"70%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-20%",x2:"350",y2:"-20%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-70%",x2:"350",y2:"-70%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-20%",x2:"70%",y2:"-70%",stroke:"red",strokeWidth:"3"}),React.createElement("line",{x1:"-350",y1:"-20%",x2:"20%",y2:"-20%",stroke:"magenta",strokeWidth:"3"}),React.createElement("line",{x1:"100%",y1:"-100%",x2:"70%",y2:"-70%",stroke:"magenta",strokeWidth:"3"}),React.createElement("text",{x:"20%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"600px"),React.createElement("text",{x:"70%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"1200px"),React.createElement("text",{x:"-20",y:"-20%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"20px"),React.createElement("text",{x:"-20",y:"-70%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"50px")))}}function n(){return React.createElement($index,{label:"Proyección abierta ( )"},React.createElement($h3,null,"Proyección abierta ( )"),React.createElement($$h,null),React.createElement($CardF,null,"La proyección abierta, representada por paréntesis `()`, permite que los valores de un diseño continúen ajustándose incluso fuera del rango de condiciones especificadas.",React.createElement("p",null,"En otras palabras, si el tamaño de la pantalla supera o queda por debajo de los límites establecidos, la interpolación de los estilos sigue calculándose de manera lineal, extendiendo el ajuste más allá de esos límites."),React.createElement("p",null,"Esto es útil cuando se desea que los estilos cambien de forma continua sin detenerse, asegurando una transición fluida sin importar si la pantalla es más pequeña o más grande que el rango definido."),React.createElement("strong",null,"Sintáxis"),React.createElement($h,null),React.createElement($code,{style:{color:"khaki"},elevation:0},["600px<-x->1200px?{","   margin: (20px, 50px);","}"].join("\n")),React.createElement($$h,null),React.createElement("center",null,React.createElement(e,null)),React.createElement($$h,null),"En el ejemplo, el hecho de que la proyección sea abierta implica que, aunque el ancho de la pantalla sea menor de 600px o mayor de 1200px, la interpolación seguirá calculando y proyectando los valores de la propiedad linealmente, extendiendo la transición fuera del rango definido."));function e(){return React.createElement("svg",{height:"300",xmlns:"http://www.w3.org/2000/svg",className:fluidCSS().lerpX([320,500],{width:[220,350]}).end(),style:{backgroundColor:"white",filter:"invert(0.95)",borderRadius:"20px"}},React.createElement("g",{transform:"translate(40, 260)"},React.createElement("line",{x1:"-350",y1:"0",x2:"350",y2:"0",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"0",y1:"-300",x2:"0",y2:"300",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-300",x2:"20%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"70%",y1:"-300",x2:"70%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-20%",x2:"350",y2:"-20%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-70%",x2:"350",y2:"-70%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-20%",x2:"70%",y2:"-70%",stroke:"red",strokeWidth:"3"}),React.createElement("line",{x1:"20%",y1:"-20%",x2:"-100%",y2:"100%",stroke:"magenta",strokeWidth:"3"}),React.createElement("line",{x1:"100%",y1:"-100%",x2:"70%",y2:"-70%",stroke:"magenta",strokeWidth:"3"}),React.createElement("text",{x:"20%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"600px"),React.createElement("text",{x:"70%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"1200px"),React.createElement("text",{x:"-20",y:"-20%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"20px"),React.createElement("text",{x:"-20",y:"-70%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"50px")))}}function r(){return React.createElement($index,{label:"Proyección cerrada [ ]"},React.createElement($h3,null,"Proyección cerrada [ ]"),React.createElement($$h,null),React.createElement($CardF,null,"Los corchetes [ ] indican una proyección cerrada, lo que significa que la interpolación se limita al rango de anchos especificado, conservando los valores del extremo más cercano al ancho de la pantalla.",React.createElement("p",null,"En otras palabras, si el ancho de la pantalla está fuera del rango definido, el valor de la propiedad no cambiará más allá del valor del extremo más cercano. Es decir, si el ancho de la pantalla es menor que el valor mínimo, se utilizará el valor de ese extremo; si es mayor que el valor máximo, se utilizará el valor del otro extremo."),React.createElement("strong",null,"Sintáxis"),React.createElement($h,null),React.createElement($code,{style:{color:"khaki"},elevation:0},["600px<-x->1200px?{","   margin: [20px, 50px];","}"].join("\n")),React.createElement($$h,null),React.createElement("center",null,React.createElement(e,null)),React.createElement($$h,null),"Esto significa que la interpolación del margen irá desde 20px a 50px conforme el ancho de la pantalla cambie de 600px a 1200px. Si la pantalla es más pequeña que 600px o más grande que 1200px, el valor de margin se mantendrá en 20px o 50px, respectivamente, dependiendo de cuál sea el valor más cercano."));function e(){return React.createElement("svg",{height:"300",xmlns:"http://www.w3.org/2000/svg",className:fluidCSS().lerpX([320,500],{width:[220,350]}).end(),style:{backgroundColor:"white",filter:"invert(0.95)",borderRadius:"20px"}},React.createElement("g",{transform:"translate(40, 260)"},React.createElement("line",{x1:"-350",y1:"0",x2:"350",y2:"0",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"0",y1:"-300",x2:"0",y2:"300",stroke:"black",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-300",x2:"20%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"70%",y1:"-300",x2:"70%",y2:"300",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-20%",x2:"350",y2:"-20%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"-350",y1:"-70%",x2:"350",y2:"-70%",stroke:"skyblue",strokeWidth:"2"}),React.createElement("line",{x1:"20%",y1:"-20%",x2:"70%",y2:"-70%",stroke:"red",strokeWidth:"3"}),React.createElement("line",{x1:"-350",y1:"-20%",x2:"20%",y2:"-20%",stroke:"magenta",strokeWidth:"3"}),React.createElement("line",{x1:"70%",y1:"-70%",x2:"350",y2:"-70%",stroke:"magenta",strokeWidth:"3"}),React.createElement("text",{x:"20%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"600px"),React.createElement("text",{x:"70%",y:"20",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"1200px"),React.createElement("text",{x:"-20",y:"-20%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"20px"),React.createElement("text",{x:"-20",y:"-70%",fontSize:"12",fill:"black",textAnchor:"middle",fontWeight:"bold"},"50px")))}}}